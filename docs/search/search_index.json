{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AsaruSim V1.0.","text":"<p> AsaruSim derives from the Amazigh word Asaru (\u2d30\u2d59\u2d30\u2d54\u2d53 ) which can mean \"pipeline\" or \"channel\".   AsaruSim is an automated Nextflow workflow designed for simulating 10x single-cell long read data from the count matrix level to the sequence level. It aimed at creating a gold standard dataset for the assessment and optimization of single-cell long-read methods. </p> <p>Five major steps are implemented:  </p> <p>(1) - Simulation of a synthetic UMI count matrix.     (2) - Generation of perfect raw reads.      (3) - Amplification of the perfect reads.      (4) - Generation of realistic synthetic reads by adding errors to mimic real reads.      (5) - Production of a report with quality control values and plots calculated on the resulting synthetic reads. </p> <p></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are more than welcome. See the git repository page.</p>"},{"location":"#license","title":"License","text":"<p>AsaruSim is released under the GPL 3.0 license.</p>"},{"location":"#citations","title":"Citations","text":"<p>If you use AsaruSim in your research, please cite this manuscript:</p> <p>Ali Hamraoui, Laurent Jourdren and Morgane Thomas-Chollier. AsaruSim: a single-cell and spatial RNA-Seq Nanopore long-reads simulation workflow. bioRxiv 2024.09.20.613625; doi: https://doi.org/10.1101/2024.09.20.613625</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>We would like to express our thanks to SLSim developers, which has been helpful to the AsaruSim workflow. Additionally, our thanks go to the teams behind Badread, SPARSim, and Trans-NanoSim whose tools are integral to the AsaruSim workflow.</p>"},{"location":"examples/","title":"Use example","text":""},{"location":"examples/#usage","title":"Usage","text":"<p>User can choose among 4 ways to simulate template reads. - use a real count matrix - estimated the parameter from a real count matrix to simulate synthetic count matrix  - specified by his/her own the input parameter - a combination of the above options</p> <p>We use SPARSIM tools to simulate count matrix. for more information a bout synthetic count matrix, please read SPARSIM documentaion.</p>"},{"location":"examples/#examples","title":"EXAMPLES","text":""},{"location":"examples/#sample-data","title":"Sample data","text":"<p>A demonstration dataset to initiate this workflow is accessible on zenodo DOI : 10.5281/zenodo.12731408. This dataset is a subsample from a Nanopore run of the 10X 5k human pbmcs.</p> <p>The human GRCh38 reference transcriptome, gtf annotation and fasta referance genome can be downloaded from Ensembl.</p>"},{"location":"examples/#basic-workflow","title":"BASIC WORKFLOW","text":"<pre><code> nextflow run main.nf --matrix dataset/sub_pbmc_matrice.csv \\\n                      --transcriptome dataset/Homo_sapiens.GRCh38.cdna.all.fa \\\n                      --features gene_name \\\n                      --gtf dataset/genes.gtf\n</code></pre>"},{"location":"examples/#with-pcr-amplifiction","title":"WITH PCR AMPLIFICTION","text":"<pre><code> nextflow run main.nf --matrix dataset/sub_pbmc_matrice.csv \\\n                      --transcriptome dataset/Homo_sapiens.GRCh38.cdna.all.fa \\\n                      --features gene_name \\\n                      --gtf dataset/GRCh38-2020-A-genes.gtf \\\n                      --pcr_cycles 2 \\\n                      --pcr_dup_rate 0.7 \\\n                      --pcr_error_rate 0.00003\n</code></pre>"},{"location":"examples/#with-simulated-cell-type-counts","title":"WITH SIMULATED CELL TYPE COUNTS","text":"<pre><code> nextflow run main.nf --matrix dataset/sub_pbmc_matrice.csv \\\n                      --transcriptome dataset/Homo_sapiens.GRCh38.cdna.all.fa \\\n                      --features gene_name \\\n                      --gtf dataset/GRCh38-2020-A-genes.gtf \\\n                      --sim_celltypes true \\\n                      --cell_types_annotation dataset/sub_pbmc_cell_type.csv\n</code></pre>"},{"location":"examples/#with-personalized-error-model","title":"WITH PERSONALIZED ERROR MODEL","text":"<pre><code>nextflow run main.nf --matrix dataset/sub_pbmc_matrice.csv \\\n                     --transcriptome dataset/Homo_sapiens.GRCh38.cdna.all.fa \\\n                     --features gene_name \\\n                     --gtf dataset/GRCh38-2020-A-genes.gtf \\\n                     --build_model true \\\n                     --fastq_model dataset/sub_pbmc_reads.fq \\\n                     --ref_genome dataset/GRCh38-2020-A-genome.fa \n</code></pre>"},{"location":"examples/#complete-workflow","title":"COMPLETE WORKFLOW","text":"<pre><code> nextflow run main.nf --matrix dataset/sub_pbmc_matrice.csv \\\n                      --transcriptome dataset/Homo_sapiens.GRCh38.cdna.all.fa \\\n                      --features gene_name \\\n                      --gtf dataset/GRCh38-2020-A-genes.gtf \\\n                      --sim_celltypes true \\\n                      --cell_types_annotation dataset/sub_pbmc_cell_type.csv\n                      --build_model true \\\n                      --fastq_model dataset/sub_pbmc_reads.fq \\\n                      --ref_genome dataset/GRCh38-2020-A-genome.fa \n                      --pcr_cycles 2 \\\n                      --pcr_dup_rate 0.7 \\\n                      --pcr_error_rate 0.00003\n</code></pre>"},{"location":"examples/#results","title":"Results","text":"<p>After execution, results will be available in the specified <code>--outdir</code>. This includes simulated Nanopore reads <code>.fastq</code>, along with log files and QC report.</p>"},{"location":"examples/#cleaning-up","title":"Cleaning Up","text":"<p>To clean up temporary files generated by Nextflow:</p> <pre><code>nextflow clean -f\n</code></pre>"},{"location":"introduction/","title":"Install AsaruSim","text":"<p>This pipeline is powered by Nextflow workflow manager. All dependencies are automatically managed by Nextflow through a preconfigured Docker container, ensuring a seamless and reproducible installation process.</p> <p>AsaruSim Github repository.</p>"},{"location":"introduction/#requirements","title":"Requirements","text":"<ul> <li><code>Nextflow</code> - A workflow engine for complex data pipelines.</li> <li><code>Docker</code> or <code>Singularity</code> - Containers for packaging necessary software, ensuring reproducibility.</li> </ul>"},{"location":"introduction/#install-nextflow","title":"Install nextflow","text":"<p>Ensure you have the following installed on your system:</p> <p><code>Java 8 or later</code>: Nextflow requires Java. Install it from Oracle or use a package manager like apt, brew, or yum depending on your OS.</p> <pre><code>curl -s https://get.nextflow.io | bash\nchmod +x nextflow\nsudo mv nextflow /usr/local/bin/\n</code></pre> <p>Nextflow is now installed and ready to use on your system. For further details on using Nextflow, refer to the official documentation.</p>"},{"location":"introduction/#install-docker","title":"Install docker","text":"<p>Install Docker.</p>"},{"location":"introduction/#run-asarusim","title":"Run AsaruSim","text":"<ul> <li>1 - Clone the github repository</li> </ul> <pre><code>git clone https://github.com/GenomiqueENS/AsaruSim.git\n\ncd AsaruSim\n</code></pre> <ul> <li>2 - Run using nextflow</li> </ul> <pre><code>nextflow run main.nf --help\n</code></pre>"},{"location":"parameters/","title":"Input parameters","text":"<p>AsaruSim simulation requires input parameters, describing the macro characteristics of the desired synthetic reads.</p>"},{"location":"parameters/#count-matrix","title":"Count matrix","text":""},{"location":"parameters/#-matrix-csv-file","title":"--matrix <code>csv file</code>","text":"<p>Feature-by-cell (gene/cell or isoform/cell) count matrix in csv format, where rows represent the features (genes or transcripts) and columns represent cells (or spatial barcodes). The input matrix may be derived from an existing single-cell short- or long-read preprocessed run. this parameter is required.</p> <p>AsaruSim require a feature name and GTF annotation for gene-per-cell matrix</p> <p>Since the sequence names in the reference transcriptome correspond to transcript ids, it is necessary for users to specify the feature name within their matrix when gene-per-cell matrix is provided. Set the feature name using the <code>--features</code> parameter.  Available options include:</p> <ul> <li><code>transcript_id</code> (default)</li> <li><code>gene_id</code></li> <li><code>gene_name</code></li> </ul> <p>Additionally, users are required to supply a gene annotation <code>(.gtf format)</code> file using the <code>--gtf</code> parameter. </p>"},{"location":"parameters/#-bc_counts-csv-file","title":"--bc_counts <code>csv file</code>","text":"<p>To simulate specific UMI counts per cell barcode with random transcripts, set the <code>--bc_counts</code> parameter to the path of a UMI counts <code>.CSV file</code>. This parameter eliminates the need for an input matrix, enabling the simulation of UMI counts where transcripts are chosed randomly.</p> <p>example of UMI counts per CB file:</p> CB counts ACGGCGATCGCGAGCC 1260 ACGGCGATCGCGAGCC 1104"},{"location":"parameters/#-cell_types_annotation-csv-file","title":"--cell_types_annotation <code>csv file</code>","text":"<p>AsaruSim can generate synthetic count tables with varying cell types, differentially expressed genes, or isoforms. This capability is particularly useful for simulating count matrices that mimic the characteristics of existing cell populations.  To simulate cell groups, AsaruSim requirs suplimentary parameters describing the characteristic of desired cell groups.</p> <p>Requirements for simulating cell groups :  AsaruSim use SPARSim R package to simulate synthetic count table. for each cell group to simulate, SPARSim needs 3 information as input:</p> <ul> <li>expression level intensities.</li> <li>expression level variabilities.</li> <li>cell group library sizes.</li> </ul> <p>fore more information see SPARSim vignettes.</p> <p>AsaruSim allows user to estimate this characteristic from an existing count table. To do so, the user need to set <code>--sim_celltypes</code> parameter to <code>true</code> and to provide the list of cell barcodes of each group <code>(.CSV file)</code> using <code>--cell_types_annotation</code> parameter:</p> CB cell_type ACGGCGATCGCGAGCC type 1 ACGGCGATCGCGAGCC type 2 <p>AsaruSim will then use the provided matrix to estimate characteristic of each cell groups and generate a synthetic count matrix.</p>"},{"location":"parameters/#template","title":"Template","text":"<p>AsaruSim generates reads that correspond to a 10X Genomics library construction coupled with Nanopore sequencing. The final construction corresponds to : an adaptor sequence composed of 10X and Nanopore adaptors,  a cellular barcode (CB), UMI sequences at the same frequencies as in the synthetic count matrix, a 20 bp oligo(dT), the feature-corresponding cDNA sequence from the reference transcriptome and a template switch oligo (TSO) at the end.</p>"},{"location":"parameters/#-dt_length-int","title":"--dT_LENGTH <code>INT</code>","text":"<p>The mean length of the oligo(dT) tail sequence, assuming a normal distribution.  (default : <code>15 bp</code>).</p>"},{"location":"parameters/#-adapter_seq-str","title":"--ADAPTER_SEQ <code>STR</code>","text":"<p>Defines the sequence of the adapter used in the ONT and 10X Genomics libraries. By default, the 10X 3' solution V3 adapter sequence is used.</p> <p>(default :<code>ACTAAAGGCCATTACGGCCTACACGACGCTCTTCCGATCT</code>).</p>"},{"location":"parameters/#-tso_seq-str","title":"--TSO_SEQ <code>STR</code>","text":"<p>Specifies the sequence of the Template Switching Oligo (TSO) nucleotid.</p> <p>(default :<code>TGTACTCTGCGTTGATACCACTGCTT</code>).</p>"},{"location":"parameters/#-full_length-bool","title":"--full_length <code>BOOL</code>","text":"<p>Simulate untruncated reads. (default :<code>false</code>).</p>"},{"location":"parameters/#-truncation_model-csv-file","title":"--truncation_model <code>csv file</code>","text":"<p>Truncation probability distribution. Automatically generated when the <code>--build_model</code> option is enabled. (default :<code>bin/models/truncation_default_model.csv</code>)</p>"},{"location":"parameters/#-unspliced_ratio-float","title":"--unspliced_ratio <code>FLOAT</code>","text":"<p>The percentage of unspliced reads to simulate. (default :<code>0.0</code>).</p>"},{"location":"parameters/#-intron_retention-bool","title":"--intron_retention <code>BOOL</code>","text":"<p>Enable simulation of intron retention events. If enabled, a reference genome must be provided using the <code>--ref_genome</code> option. (default :<code>false</code>)</p>"},{"location":"parameters/#-ir_model-csv-file","title":"--ir_model <code>csv file</code>","text":"<p>Markov model of Intron Retention events. This can be generated using the Nanosim module <code>model_intron_retention.py</code>.  (default :<code>bin/models/SC3pv3_GEX_Human_IR_markov_model</code>)</p> <p>AsaruSim requires both a reference genome and a GTF annotation to simulate intron retention events and unspliced transcripts</p> <p>To simulate intron retention events (<code>--intron_retention</code>) and unspliced transcripts (<code>--unspliced_ratio</code>), you must provide a reference genome in FASTA format. Additionally, a GTF annotation file containing intron coordinate information is required, which can be generated using the AGAT tool:\\</p> <p><pre> <code>conda install -c bioconda agat\nagat_sp_add_introns.pl --gff genes.sorted.gtf -o genes.sorted.intron.gff</code> </pre></p>"},{"location":"parameters/#reference-transcripts","title":"Reference transcripts","text":"<p>The feature-corresponding cDNA sequence is sampled from the reference transcriptome or reference genome for unsplaced and intron retained transcripts. </p>"},{"location":"parameters/#-transcriptome-fasta-file","title":"--transcriptome <code>FASTA file</code>","text":"<p>A reference transcriptome file in <code>.fasta</code> format can be downloaded from Ensembl.</p>"},{"location":"parameters/#-length_dist-str","title":"--length_dist <code>STR</code>","text":"<p>To mimic the real read length distribution when a gene expression matrix is provided, a realistic read length distribution is achieved by selecting a random cDNA of the corresponding gene, with a prior probability favoring short-length cDNA.</p> <p>AsaruSim estimates this read length using a log-normal distribution. Users may provide their parameters to personalize the distribution using three comma-delimited values (shape, location, scale) with the parameter <code>--length_dist</code>.  (default :<code>0.37,0.0,825</code>)</p> <ul> <li><code>Shape (\u03c3)</code> : The standard deviation of the log values.</li> <li><code>Location (\u03bc)</code> : The location parameter using the basic form of the log-normal distribution.</li> <li><code>Scale</code> : The scale factor (the median of your distribution).</li> </ul> <p>Fit read distribution of real reads</p> <p>Users may also fit their real reads distribution with this approach by providing a subset of real reads (in <code>.FASTQ</code> format) using the <code>--model_fastq</code> parameter. (See also build model in the Error model section)</p>"},{"location":"parameters/#-ref_genome-fasta-file","title":"--ref_genome <code>FASTA file</code>","text":"<p>The reference genome file in <code>.fasta</code> format can be downloaded from Ensembl.</p>"},{"location":"parameters/#pcr-amplification","title":"PCR amplification","text":"<p>AsaruSim take into account the bias of PCR amplification introduced during library constructions process. The PCR amplification is simulated by replicating the synthetic reads at each cycle, with a capturing probabily and un error rate.</p>"},{"location":"parameters/#-pcr_cycles-int","title":"--PCR_cycles <code>INT</code>","text":"<p>The number of PCR cycles to simulate. During each cycle, the reads are duplicated exponentially, following the formula: $$\\  N = N_0 \\times (1 + E)^{C} \\ $$</p> <p>where: N is the final number of reads,  N0 is the initial number of reads,  E is the efficiency rate, and  C is the number of cycles.</p>"},{"location":"parameters/#-pcr_efficiency-float","title":"--PCR_efficiency <code>FLOAT</code>","text":"<p>The efficiency rate of duplication is fixed by the user (default: <code>--PCR_efficiency 0.9</code>)</p>"},{"location":"parameters/#-pcr_error_rate-float","title":"--PCR_error_rate <code>FLOAT</code>","text":"<p>The probability to be mutated during the process for each nucleotide in the duplicated read. The error rate is also fixed by the user (default: <code>--PCR_error_rate 3.5e-05</code>)</p>"},{"location":"parameters/#-total_reads-int","title":"--total_reads <code>INT</code>","text":"<p>Number of total reads to random subset from the resulting artificial PCR product, to mimic the experimental protocol where only a subset of the sample is used for the sequencing step.</p> <p>Users can use amplification rate instead of PCR amplification</p> <p>Inspired by SLSim, the amplification rate allows users to repeat each template read a specified number of times. This is a simpler way to simulate amplification with: $$\\ x \\sim \\text{Poi}(\\text{amp_rate}) \\ $$ The value of x is set by the user using <code>--amp_rate</code></p>"},{"location":"parameters/#error-model","title":"Error model","text":"<p>AsaruSim uses the Badread Python library to simulate nanopore sequencing errors and assign per-base quality scores based on pre-trained error models (see Badread documentation for more information). To do so, AsaruSim requires:</p>"},{"location":"parameters/#-trained_model-str","title":"--trained_model <code>STR</code> <p>This allows the user to choose one of the built-in error models within the Badread database. The possible values are:</p>  <p><code>nanopore2023</code>: a model trained on ONT R10.4.1 reads from 2023 (the default). <code>nanopore2020</code>: a model trained on ONT R9.4.1 reads from 2020. <code>nanopore2018</code>: a model trained on ONT R9.4/R9.4.1 reads from 2018. <code>random</code>: a random error model with a 1/3 chance each of insertion, deletion, and substitution.     a file path for a trained model. </p>","text":""},{"location":"parameters/#-badread_identity-str","title":"--badread_identity <code>STR</code> <p>Badread uses the Beta distribution to sample read identities. The distribution is defined with three parameters: <code>mean</code>, <code>standard deviation</code>, and <code>maximum</code> value. To pass these parameters to AsaruSim, use three comma-delimited values (identity mean, max, stdev). default : <code>--badread_identity 95,99,2.5</code>.</p>","text":""},{"location":"parameters/#-build_model-bool","title":"--build_model <code>BOOL</code> <p> To internally train a personalized read identity, Qscore, and error models, AsaruSim requires a real FASTQ read file that can be provided using <code>--model_fastq</code>. The user can choose the model to estimate sequence identity with the --identity_model option, which includes three possible identity models, either including or excluding gaps. By default, the \"Gap-Excluded Identity\" model is used.</p>  <p>AsaruSim also accepts pre-built model files</p> <p>Users can use <code>--error_model</code> and <code>--qscore_model</code> to provide Badread pre-built models in file format.</p>","text":""}]}